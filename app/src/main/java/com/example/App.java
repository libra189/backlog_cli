/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;

public class App {
    static class Argument {
        @Parameter(names = { "-v", "--version" }, description = "app version")
        Boolean isVersion;

        @Parameter(names = { "-h", "--help" }, description = "How to usage")
        Boolean isHelp = false;
    }

    @Parameters(commandNames = "init", commandDescription = "app Initialization")
    static class InitArgument {
        @Parameter(names = { "-s", "--space_key" }, description = "your space key")
        String space_key;

        @Parameter(names = { "--client_id" }, description = "your client id")
        String client_id;

        @Parameter(names = { "--client_secret" }, description = "your client secret")
        String client_secret;
    }
    
    static @Parameters(commandNames = "list", commandDescription = "show issue list")
    class ListArgument {
        @Parameter(names = { "-a", "--all" }, description = "app version")
        Boolean isFetchAllTasks;
    }

    @Parameters(commandNames = "view", commandDescription = "show issue detail")
    static class ViewArgument {
        @Parameter(names = { "--id" }, description = "issue id", required = true)
        String issueId;
    }

    @Parameters(commandNames = "update", commandDescription = "update issue status")
    static class UpdateArgument {
        @Parameter(names = { "--id" }, description = "issue id", required = true)
        String issueId;
    }

    public static void main(String... args) {
        var argument = new Argument();
        var initArgument = new InitArgument();
        var listArgument = new ListArgument();
        var viewArgument = new ViewArgument();
        var updateArgument = new UpdateArgument();

        var commander = JCommander.newBuilder()
                .programName("appName")
                .addObject(argument)
                .addCommand(initArgument)
                .addCommand(listArgument)
                .addCommand(viewArgument)
                .addCommand(updateArgument)
                .build();

        // コマンドラインパラメーター解析
        commander.parse(args);

        // 使用方法（パラメーターの種類）表示
        if (argument.isHelp) {
            commander.usage();
            return;
        }

        String command = commander.getParsedCommand();
        switch (command) {
            case "init":
                System.out.println("subcommand: init");
                Init cmd = new Init();
                cmd.exec();
                break;
            case "list":
                System.out.println("subcommand: list");
                break;
            case "view":
                System.out.println("subcommand: view");
                break;
            case "update":
                System.out.println("subcommand: update");
                break;
            default:
                commander.usage();
        }
    }
}
